{
  "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
  "name": "Z Language",
  "patterns": [
    { "include": "#keywords" },
    { "include": "#strings" },
    { "include": "#characters" },
    { "include": "#comments" },
    { "include": "#numbers" },
    { "include": "#functions" },
    { "include": "#classes" },
    { "include": "#imports" },
    { "include": "#preprocessor" },
    { "include": "#operators" }
  ],
  "repository": {
    "keywords": {
      "patterns": [
        {
          "name": "keyword.control.z",
          "match": "\\b(if|else|while|for|return|break|continue|switch|case|default|goto|do)\\b"
        },
        {
          "name": "keyword.other.z",
          "match": "\\b(class|struct|union|enum|typedef|sizeof|volatile|static|const|extern|register|auto|inline|restrict|int|float|double|char|void|short|long|signed|unsigned|bool)\\b"
        }
      ]
    },
    "strings": {
      "name": "string.quoted.double.z",
      "begin": "\"",
      "end": "\"",
      "patterns": [
        { "name": "constant.character.escape.z", "match": "\\\\." }
      ]
    },
    "characters": {
      "name": "string.quoted.single.z",
      "begin": "'",
      "end": "'",
      "patterns": [
        { "name": "constant.character.escape.z", "match": "\\\\." }
      ]
    },
    "comments": {
      "patterns": [
        { "name": "comment.line.double-slash.z", "match": "//.*$" },
        { "name": "comment.block.z", "begin": "/\\*", "end": "\\*/" }
      ]
    },
    "numbers": {
      "patterns": [
        { "name": "constant.numeric.hex.z", "match": "\\b0[xX][0-9a-fA-F]+\\b" },
        { "name": "constant.numeric.octal.z", "match": "\\b0[0-7]+\\b" },
        { "name": "constant.numeric.decimal.z", "match": "\\b\\d+(\\.\\d+)?([eE][+-]?\\d+)?\\b" }
      ]
    },
    "functions": {
      "patterns": [
        { "name": "entity.name.function.z", "match": "\\b([a-zA-Z_][a-zA-Z0-9_]*)\\s*(?=\\()" }
      ]
    },
    "classes": {
      "patterns": [
        { "name": "keyword.other.class.z", "match": "\\b(class|struct|union|enum)\\b" },
        { "name": "entity.name.type.class.z", "match": "(?<=\\b(class|struct|union|enum)\\s+)[a-zA-Z_][a-zA-Z0-9_]*" }
      ]
    },
    "imports": {
      "patterns": [
        { "name": "keyword.control.import.z", "match": "#import|#include" },
        {
          "name": "string.quoted.angle.z",
          "begin": "<",
          "end": ">",
          "beginCaptures": { "0": { "name": "punctuation.definition.string.begin.z" } },
          "endCaptures": { "0": { "name": "punctuation.definition.string.end.z" } }
        }
      ]
    },
    "preprocessor": {
      "patterns": [
        {
          "name": "keyword.preprocessor.z",
          "match": "^\\s*#\\s*(define)\\b\\s+([a-zA-Z_][a-zA-Z0-9_]*)\\s+(.*)$",
          "captures": {
            "1": { "name": "keyword.control.define.z" },
            "2": { "name": "entity.name.constant.z" },
            "3": { "name": "constant.other.red.z" }
          }
        },
        {
          "name": "keyword.preprocessor.z",
          "match": "^\\s*#\\s*(undef|if|ifdef|ifndef|else|elif|endif|include|pragma|error|line)\\b.*$"
        }
      ]
    },

    "operators": {
      "patterns": [
        { "name": "keyword.operator.z", "match": "[-+*/%=!<>|&^~]+|\\?|:" }
      ]
    }
  },
  "scopeName": "source.z"
}
