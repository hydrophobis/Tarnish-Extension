{
  "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
  "name": "Tarnish",
  "scopeName": "source.tarnish",
  "fileTypes": ["rn", "tarnish"],
  "patterns": [
    {
      "include": "#comments"
    },
    {
      "include": "#preprocessor"
    },
    {
      "include": "#import-statement"
    },
    {
      "include": "#namespace"
    },
    {
      "include": "#class-definition"
    },
    {
      "include": "#operator-overload"
    },
    {
      "include": "#strings"
    },
    {
      "include": "#numbers"
    },
    {
      "include": "#keywords"
    },
    {
      "include": "#types"
    },
    {
      "include": "#function-call"
    },
    {
      "include": "#operators"
    },
    {
      "include": "#punctuation"
    },
    {
      "include": "#identifiers"
    }
  ],
  "repository": {
    "comments": {
      "patterns": [
        {
          "name": "comment.line.double-slash.tarnish",
          "begin": "//",
          "end": "$"
        },
        {
          "name": "comment.block.tarnish",
          "begin": "/\\*",
          "end": "\\*/"
        }
      ]
    },
    "preprocessor": {
      "patterns": [
        {
          "name": "meta.preprocessor.tarnish",
          "begin": "^\\s*#\\s*(define|undef|if|ifdef|ifndef|else|elif|endif|include|pragma|warning|error|line)\\b",
          "end": "$",
          "beginCaptures": {
            "1": {
              "name": "keyword.control.directive.tarnish"
            }
          }
        }
      ]
    },
    "import-statement": {
      "name": "meta.import.tarnish",
      "begin": "^\\s*#\\s*import\\b",
      "end": "$",
      "beginCaptures": {
        "0": {
          "name": "keyword.control.import.tarnish"
        }
      },
      "patterns": [
        {
          "name": "string.quoted.angle.tarnish",
          "begin": "<",
          "end": ">",
          "patterns": [
            {
              "name": "constant.character.escape.tarnish",
              "match": "\\\\."
            }
          ]
        },
        {
          "name": "string.quoted.double.tarnish",
          "begin": "\"",
          "end": "\"",
          "patterns": [
            {
              "name": "constant.character.escape.tarnish",
              "match": "\\\\."
            }
          ]
        }
      ]
    },
    "namespace": {
      "name": "meta.namespace.tarnish",
      "begin": "\\b(namespace)\\s+([a-zA-Z_][a-zA-Z0-9_]*)\\s*\\{",
      "end": "\\}",
      "beginCaptures": {
        "1": {
          "name": "keyword.control.namespace.tarnish"
        },
        "2": {
          "name": "entity.name.namespace.tarnish"
        }
      },
      "patterns": [
        {
          "include": "$self"
        }
      ]
    },
    "class-definition": {
      "name": "meta.class.tarnish",
      "begin": "\\b(class)\\s+([a-zA-Z_][a-zA-Z0-9_]*)\\s*\\{",
      "end": "\\}",
      "beginCaptures": {
        "1": {
          "name": "storage.type.class.tarnish"
        },
        "2": {
          "name": "entity.name.type.class.tarnish"
        }
      },
      "patterns": [
        {
          "include": "#operator-overload"
        },
        {
          "include": "#member-function"
        },
        {
          "include": "#member-variable"
        },
        {
          "include": "$self"
        }
      ]
    },
    "operator-overload": {
      "name": "meta.operator-overload.tarnish",
      "begin": "\\b([a-zA-Z_][a-zA-Z0-9_*]*\\**)\\s+(operator)\\s*([+\\-*/<>=!&|^%~]+|\\[\\]|\\(\\))\\s*\\(",
      "end": "\\)",
      "beginCaptures": {
        "1": {
          "name": "storage.type.tarnish"
        },
        "2": {
          "name": "keyword.operator.overload.tarnish"
        },
        "3": {
          "name": "entity.name.function.operator.tarnish"
        }
      },
      "patterns": [
        {
          "include": "#parameter-list"
        }
      ]
    },
    "member-function": {
      "name": "meta.function.tarnish",
      "begin": "\\b([a-zA-Z_][a-zA-Z0-9_*]*\\**)\\s+([a-zA-Z_][a-zA-Z0-9_]*)\\s*\\(",
      "end": "\\)",
      "beginCaptures": {
        "1": {
          "name": "storage.type.tarnish"
        },
        "2": {
          "name": "entity.name.function.member.tarnish"
        }
      },
      "patterns": [
        {
          "include": "#parameter-list"
        }
      ]
    },
    "member-variable": {
      "name": "meta.variable.member.tarnish",
      "match": "\\b([a-zA-Z_][a-zA-Z0-9_*]*\\**)\\s+([a-zA-Z_][a-zA-Z0-9_]*)\\s*;",
      "captures": {
        "1": {
          "name": "storage.type.tarnish"
        },
        "2": {
          "name": "variable.other.member.tarnish"
        }
      }
    },
    "parameter-list": {
      "patterns": [
        {
          "name": "meta.parameter.tarnish",
          "match": "\\b([a-zA-Z_][a-zA-Z0-9_*]*\\**)\\s+([a-zA-Z_][a-zA-Z0-9_]*)",
          "captures": {
            "1": {
              "name": "storage.type.tarnish"
            },
            "2": {
              "name": "variable.parameter.tarnish"
            }
          }
        },
        {
          "include": "$self"
        }
      ]
    },
    "strings": {
      "patterns": [
        {
          "name": "string.quoted.double.tarnish",
          "begin": "\"",
          "end": "\"",
          "patterns": [
            {
              "name": "constant.character.escape.tarnish",
              "match": "\\\\."
            }
          ]
        },
        {
          "name": "string.quoted.single.tarnish",
          "begin": "'",
          "end": "'",
          "patterns": [
            {
              "name": "constant.character.escape.tarnish",
              "match": "\\\\."
            }
          ]
        }
      ]
    },
    "numbers": {
      "patterns": [
        {
          "name": "constant.numeric.hex.tarnish",
          "match": "\\b0[xX][0-9a-fA-F]+[lLfF]?\\b"
        },
        {
          "name": "constant.numeric.octal.tarnish",
          "match": "\\b0[0-7]+[lLfF]?\\b"
        },
        {
          "name": "constant.numeric.decimal.tarnish",
          "match": "\\b([0-9]*\\.?[0-9]+([eE][-+]?[0-9]+)?)[fFlL]?\\b"
        }
      ]
    },
    "keywords": {
      "patterns": [
        {
          "name": "keyword.control.tarnish",
          "match": "\\b(if|else|while|for|do|switch|case|default|break|continue|return|goto)\\b"
        },
        {
          "name": "keyword.operator.sizeof.tarnish",
          "match": "\\bsizeof\\b"
        },
        {
          "name": "storage.modifier.tarnish",
          "match": "\\b(static|extern|auto|register|const|volatile|inline|restrict)\\b"
        },
        {
          "name": "storage.type.tarnish",
          "match": "\\b(void|char|short|int|long|float|double|signed|unsigned|struct|union|enum|typedef)\\b"
        },
        {
          "name": "keyword.other.tarnish",
          "match": "\\b(this|operator|namespace|class)\\b"
        },
        {
          "name": "constant.language.tarnish",
          "match": "\\b(NULL|true|false)\\b"
        }
      ]
    },
    "types": {
      "patterns": [
        {
          "name": "storage.type.pointer.tarnish",
          "match": "\\b([a-zA-Z_][a-zA-Z0-9_]*)\\s*(\\*+)",
          "captures": {
            "1": {
              "name": "storage.type.tarnish"
            },
            "2": {
              "name": "punctuation.definition.pointer.tarnish"
            }
          }
        },
        {
          "name": "storage.type.custom.tarnish",
          "match": "\\b[a-zA-Z_][a-zA-Z0-9_]*ptr\\b"
        }
      ]
    },
    "function-call": {
      "name": "meta.function-call.tarnish",
      "begin": "\\b([a-zA-Z_][a-zA-Z0-9_]*)\\s*\\(",
      "end": "\\)",
      "beginCaptures": {
        "1": {
          "name": "entity.name.function.tarnish"
        }
      },
      "patterns": [
        {
          "include": "$self"
        }
      ]
    },
    "operators": {
      "patterns": [
        {
          "name": "keyword.operator.assignment.tarnish",
          "match": "(=|\\+=|-=|\\*=|/=|%=|&=|\\|=|\\^=|<<=|>>=)"
        },
        {
          "name": "keyword.operator.comparison.tarnish",
          "match": "(==|!=|<|<=|>|>=)"
        },
        {
          "name": "keyword.operator.logical.tarnish",
          "match": "(&&|\\|\\||!)"
        },
        {
          "name": "keyword.operator.bitwise.tarnish",
          "match": "(&|\\||\\^|~|<<|>>)"
        },
        {
          "name": "keyword.operator.arithmetic.tarnish",
          "match": "(\\+|\\-|\\*|/|%|\\+\\+|\\-\\-)"
        },
        {
          "name": "keyword.operator.member.tarnish",
          "match": "(\\.|->)"
        },
        {
          "name": "keyword.operator.scope.tarnish",
          "match": "::"
        },
        {
          "name": "keyword.operator.ternary.tarnish",
          "match": "(\\?|:)"
        }
      ]
    },
    "punctuation": {
      "patterns": [
        {
          "name": "punctuation.terminator.statement.tarnish",
          "match": ";"
        },
        {
          "name": "punctuation.separator.comma.tarnish",
          "match": ","
        },
        {
          "name": "punctuation.section.block.begin.tarnish",
          "match": "\\{"
        },
        {
          "name": "punctuation.section.block.end.tarnish",
          "match": "\\}"
        },
        {
          "name": "punctuation.section.parens.begin.tarnish",
          "match": "\\("
        },
        {
          "name": "punctuation.section.parens.end.tarnish",
          "match": "\\)"
        },
        {
          "name": "punctuation.section.brackets.begin.tarnish",
          "match": "\\["
        },
        {
          "name": "punctuation.section.brackets.end.tarnish",
          "match": "\\]"
        }
      ]
    },
    "identifiers": {
      "name": "variable.other.tarnish",
      "match": "\\b[a-zA-Z_][a-zA-Z0-9_]*\\b"
    }
  }
}